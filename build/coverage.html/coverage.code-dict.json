{"/home/travis/build/npmtest/node-npmtest-express-graphql/test.js":"/* istanbul instrument in package npmtest_express_graphql */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-graphql/lib.npmtest_express_graphql.js":"/* istanbul instrument in package npmtest_express_graphql */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_express_graphql = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_express_graphql = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-express-graphql/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-express-graphql && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_express_graphql */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_express_graphql\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_express_graphql.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_express_graphql.rollup.js'] =\n            local.assetsDict['/assets.npmtest_express_graphql.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_express_graphql.__dirname +\n                    '/lib.npmtest_express_graphql.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-graphql/node_modules/express-graphql/dist/index.js":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nvar _accepts = require('accepts');\n\nvar _accepts2 = _interopRequireDefault(_accepts);\n\nvar _graphql = require('graphql');\n\nvar _httpErrors = require('http-errors');\n\nvar _httpErrors2 = _interopRequireDefault(_httpErrors);\n\nvar _url = require('url');\n\nvar _url2 = _interopRequireDefault(_url);\n\nvar _parseBody = require('./parseBody');\n\nvar _renderGraphiQL = require('./renderGraphiQL');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Middleware for express; takes an options object or function as input to\n * configure behavior, and returns an express middleware.\n */\n\n\n/**\n * Used to configure the graphqlHTTP middleware by providing a schema\n * and other configuration options.\n *\n * Options can be provided as an Object, a Promise for an Object, or a Function\n * that returns an Object or a Promise for an Object.\n */\n\n\n/**\n * All information about a GraphQL request.\n */\nmodule.exports = graphqlHTTP;\nfunction graphqlHTTP(options) {\n  if (!options) {\n    throw new Error('GraphQL middleware requires options.');\n  }\n\n  return function (request, response) {\n    // Higher scoped variables are referred to at various stages in the\n    // asynchronous state machine below.\n    var schema = void 0;\n    var context = void 0;\n    var rootValue = void 0;\n    var pretty = void 0;\n    var graphiql = void 0;\n    var formatErrorFn = void 0;\n    var extensionsFn = void 0;\n    var showGraphiQL = void 0;\n    var query = void 0;\n    var documentAST = void 0;\n    var variables = void 0;\n    var operationName = void 0;\n    var validationRules = void 0;\n\n    // Promises are used as a mechanism for capturing any thrown errors during\n    // the asynchronous process below.\n\n    // Resolve the Options to get OptionsData.\n    return new Promise(function (resolve) {\n      resolve(typeof options === 'function' ? options(request, response) : options);\n    }).then(function (optionsData) {\n      // Assert that optionsData is in fact an Object.\n      if (!optionsData || (typeof optionsData === 'undefined' ? 'undefined' : _typeof(optionsData)) !== 'object') {\n        throw new Error('GraphQL middleware option function must return an options object ' + 'or a promise which will be resolved to an options object.');\n      }\n\n      // Assert that schema is required.\n      if (!optionsData.schema) {\n        throw new Error('GraphQL middleware options must contain a schema.');\n      }\n\n      // Collect information from the options data object.\n      schema = optionsData.schema;\n      context = optionsData.context || request;\n      rootValue = optionsData.rootValue;\n      pretty = optionsData.pretty;\n      graphiql = optionsData.graphiql;\n      formatErrorFn = optionsData.formatError;\n      extensionsFn = optionsData.extensions;\n\n      validationRules = _graphql.specifiedRules;\n      if (optionsData.validationRules) {\n        validationRules = validationRules.concat(optionsData.validationRules);\n      }\n\n      // GraphQL HTTP only supports GET and POST methods.\n      if (request.method !== 'GET' && request.method !== 'POST') {\n        response.setHeader('Allow', 'GET, POST');\n        throw (0, _httpErrors2.default)(405, 'GraphQL only supports GET and POST requests.');\n      }\n\n      // Parse the Request to get GraphQL request parameters.\n      return getGraphQLParams(request);\n    }).then(function (params) {\n      // Get GraphQL params from the request and POST body data.\n      query = params.query;\n      variables = params.variables;\n      operationName = params.operationName;\n      showGraphiQL = graphiql && canDisplayGraphiQL(request, params);\n\n      // If there is no query, but GraphiQL will be displayed, do not produce\n      // a result, otherwise return a 400: Bad Request.\n      if (!query) {\n        if (showGraphiQL) {\n          return null;\n        }\n        throw (0, _httpErrors2.default)(400, 'Must provide query string.');\n      }\n\n      // GraphQL source.\n      var source = new _graphql.Source(query, 'GraphQL request');\n\n      // Parse source to AST, reporting any syntax error.\n      try {\n        documentAST = (0, _graphql.parse)(source);\n      } catch (syntaxError) {\n        // Return 400: Bad Request if any syntax errors errors exist.\n        response.statusCode = 400;\n        return { errors: [syntaxError] };\n      }\n\n      // Validate AST, reporting any errors.\n      var validationErrors = (0, _graphql.validate)(schema, documentAST, validationRules);\n      if (validationErrors.length > 0) {\n        // Return 400: Bad Request if any validation errors exist.\n        response.statusCode = 400;\n        return { errors: validationErrors };\n      }\n\n      // Only query operations are allowed on GET requests.\n      if (request.method === 'GET') {\n        // Determine if this GET request will perform a non-query.\n        var operationAST = (0, _graphql.getOperationAST)(documentAST, operationName);\n        if (operationAST && operationAST.operation !== 'query') {\n          // If GraphiQL can be shown, do not perform this query, but\n          // provide it to GraphiQL so that the requester may perform it\n          // themselves if desired.\n          if (showGraphiQL) {\n            return null;\n          }\n\n          // Otherwise, report a 405: Method Not Allowed error.\n          response.setHeader('Allow', 'POST');\n          throw (0, _httpErrors2.default)(405, 'Can only perform a ' + operationAST.operation + ' operation ' + 'from a POST request.');\n        }\n      }\n      // Perform the execution, reporting any errors creating the context.\n      try {\n        return (0, _graphql.execute)(schema, documentAST, rootValue, context, variables, operationName);\n      } catch (contextError) {\n        // Return 400: Bad Request if any execution context errors exist.\n        response.statusCode = 400;\n        return { errors: [contextError] };\n      }\n    }).then(function (result) {\n      // Collect and apply any metadata extensions if a function was provided.\n      // http://facebook.github.io/graphql/#sec-Response-Format\n      if (result && extensionsFn) {\n        return Promise.resolve(extensionsFn({\n          document: documentAST,\n          variables: variables,\n          operationName: operationName,\n          result: result\n        })).then(function (extensions) {\n          if (extensions && (typeof extensions === 'undefined' ? 'undefined' : _typeof(extensions)) === 'object') {\n            result.extensions = extensions;\n          }\n          return result;\n        });\n      }\n      return result;\n    }).catch(function (error) {\n      // If an error was caught, report the httpError status, or 500.\n      response.statusCode = error.status || 500;\n      return { errors: [error] };\n    }).then(function (result) {\n      // If no data was included in the result, that indicates a runtime query\n      // error, indicate as such with a generic status code.\n      // Note: Information about the error itself will still be contained in\n      // the resulting JSON payload.\n      // http://facebook.github.io/graphql/#sec-Data\n      if (result && result.data === null) {\n        response.statusCode = 500;\n      }\n      // Format any encountered errors.\n      if (result && result.errors) {\n        result.errors = result.errors.map(formatErrorFn || _graphql.formatError);\n      }\n      // If allowed to show GraphiQL, present it instead of JSON.\n      if (showGraphiQL) {\n        var payload = (0, _renderGraphiQL.renderGraphiQL)({\n          query: query, variables: variables,\n          operationName: operationName, result: result\n        });\n        response.setHeader('Content-Type', 'text/html; charset=utf-8');\n        sendResponse(response, payload);\n      } else {\n        // Otherwise, present JSON directly.\n        var _payload = JSON.stringify(result, null, pretty ? 2 : 0);\n        response.setHeader('Content-Type', 'application/json; charset=utf-8');\n        sendResponse(response, _payload);\n      }\n    });\n  };\n}\n\n/**\n * Provided a \"Request\" provided by express or connect (typically a node style\n * HTTPClientRequest), Promise the GraphQL request parameters.\n */\nmodule.exports.getGraphQLParams = getGraphQLParams;\nfunction getGraphQLParams(request) {\n  return (0, _parseBody.parseBody)(request).then(function (bodyData) {\n    var urlData = request.url && _url2.default.parse(request.url, true).query || {};\n    return parseGraphQLParams(urlData, bodyData);\n  });\n}\n\n/**\n * Helper function to get the GraphQL params from the request.\n */\nfunction parseGraphQLParams(urlData, bodyData) {\n  // GraphQL Query string.\n  var query = urlData.query || bodyData.query;\n  if (typeof query !== 'string') {\n    query = null;\n  }\n\n  // Parse the variables if needed.\n  var variables = urlData.variables || bodyData.variables;\n  if (variables && typeof variables === 'string') {\n    try {\n      variables = JSON.parse(variables);\n    } catch (error) {\n      throw (0, _httpErrors2.default)(400, 'Variables are invalid JSON.');\n    }\n  } else if ((typeof variables === 'undefined' ? 'undefined' : _typeof(variables)) !== 'object') {\n    variables = null;\n  }\n\n  // Name of GraphQL operation to execute.\n  var operationName = urlData.operationName || bodyData.operationName;\n  if (typeof operationName !== 'string') {\n    operationName = null;\n  }\n\n  var raw = urlData.raw !== undefined || bodyData.raw !== undefined;\n\n  return { query: query, variables: variables, operationName: operationName, raw: raw };\n}\n\n/**\n * Helper function to determine if GraphiQL can be displayed.\n */\nfunction canDisplayGraphiQL(request, params) {\n  // If `raw` exists, GraphiQL mode is not enabled.\n  // Allowed to show GraphiQL if not requested as raw and this request\n  // prefers HTML over JSON.\n  return !params.raw && (0, _accepts2.default)(request).types(['json', 'html']) === 'html';\n}\n\n/**\n * Helper function for sending the response data. Use response.send it method\n * exists (express), otherwise use response.end (connect).\n */\nfunction sendResponse(response, data) {\n  if (typeof response.send === 'function') {\n    response.send(data);\n  } else {\n    response.end(data);\n  }\n}","/home/travis/build/npmtest/node-npmtest-express-graphql/node_modules/express-graphql/dist/parseBody.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nexports.parseBody = parseBody;\n\nvar _contentType = require('content-type');\n\nvar _contentType2 = _interopRequireDefault(_contentType);\n\nvar _rawBody = require('raw-body');\n\nvar _rawBody2 = _interopRequireDefault(_rawBody);\n\nvar _httpErrors = require('http-errors');\n\nvar _httpErrors2 = _interopRequireDefault(_httpErrors);\n\nvar _querystring = require('querystring');\n\nvar _querystring2 = _interopRequireDefault(_querystring);\n\nvar _zlib = require('zlib');\n\nvar _zlib2 = _interopRequireDefault(_zlib);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Provided a \"Request\" provided by express or connect (typically a node style\n * HTTPClientRequest), Promise the body data contained.\n */\nfunction parseBody(req) {\n  return new Promise(function (resolve, reject) {\n    var body = req.body;\n\n    // If express has already parsed a body as a keyed object, use it.\n    if ((typeof body === 'undefined' ? 'undefined' : _typeof(body)) === 'object' && !(body instanceof Buffer)) {\n      return resolve(body);\n    }\n\n    // Skip requests without content types.\n    if (req.headers['content-type'] === undefined) {\n      return resolve({});\n    }\n\n    var typeInfo = _contentType2.default.parse(req);\n\n    // If express has already parsed a body as a string, and the content-type\n    // was application/graphql, parse the string body.\n    if (typeof body === 'string' && typeInfo.type === 'application/graphql') {\n      return resolve(graphqlParser(body));\n    }\n\n    // Already parsed body we didn't recognise? Parse nothing.\n    if (body) {\n      return resolve({});\n    }\n\n    // Use the correct body parser based on Content-Type header.\n    switch (typeInfo.type) {\n      case 'application/graphql':\n        return read(req, typeInfo, graphqlParser, resolve, reject);\n      case 'application/json':\n        return read(req, typeInfo, jsonEncodedParser, resolve, reject);\n      case 'application/x-www-form-urlencoded':\n        return read(req, typeInfo, urlEncodedParser, resolve, reject);\n    }\n\n    // If no Content-Type header matches, parse nothing.\n    return resolve({});\n  });\n}\n\nfunction jsonEncodedParser(body) {\n  if (jsonObjRegex.test(body)) {\n    /* eslint-disable no-empty */\n    try {\n      return JSON.parse(body);\n    } catch (error) {}\n    // Do nothing\n\n    /* eslint-enable no-empty */\n  }\n  throw (0, _httpErrors2.default)(400, 'POST body sent invalid JSON.');\n}\n\nfunction urlEncodedParser(body) {\n  return _querystring2.default.parse(body);\n}\n\nfunction graphqlParser(body) {\n  return { query: body };\n}\n\n/**\n * RegExp to match an Object-opening brace \"{\" as the first non-space\n * in a string. Allowed whitespace is defined in RFC 7159:\n *\n *     x20  Space\n *     x09  Horizontal tab\n *     x0A  Line feed or New line\n *     x0D  Carriage return\n */\nvar jsonObjRegex = /^[\\x20\\x09\\x0a\\x0d]*\\{/;\n\n// Read and parse a request body.\nfunction read(req, typeInfo, parseFn, resolve, reject) {\n  var charset = (typeInfo.parameters.charset || 'utf-8').toLowerCase();\n\n  // Assert charset encoding per JSON RFC 7159 sec 8.1\n  if (charset.slice(0, 4) !== 'utf-') {\n    throw (0, _httpErrors2.default)(415, 'Unsupported charset \"' + charset.toUpperCase() + '\".');\n  }\n\n  // Get content-encoding (e.g. gzip)\n  var contentEncoding = req.headers['content-encoding'];\n  var encoding = typeof contentEncoding === 'string' ? contentEncoding.toLowerCase() : 'identity';\n  var length = encoding === 'identity' ? req.headers['content-length'] : null;\n  var limit = 100 * 1024; // 100kb\n  var stream = decompressed(req, encoding);\n\n  // Read body from stream.\n  (0, _rawBody2.default)(stream, { encoding: charset, length: length, limit: limit }, function (err, body) {\n    if (err) {\n      return reject(err.type === 'encoding.unsupported' ? (0, _httpErrors2.default)(415, 'Unsupported charset \"' + charset.toUpperCase() + '\".') : (0, _httpErrors2.default)(400, 'Invalid body: ' + err.message + '.'));\n    }\n\n    try {\n      // Decode and parse body.\n      return resolve(parseFn(body));\n    } catch (error) {\n      return reject(error);\n    }\n  });\n}\n\n// Return a decompressed stream, given an encoding.\nfunction decompressed(req, encoding) {\n  switch (encoding) {\n    case 'identity':\n      return req;\n    case 'deflate':\n      return req.pipe(_zlib2.default.createInflate());\n    case 'gzip':\n      return req.pipe(_zlib2.default.createGunzip());\n  }\n  throw (0, _httpErrors2.default)(415, 'Unsupported content-encoding \"' + encoding + '\".');\n}","/home/travis/build/npmtest/node-npmtest-express-graphql/node_modules/express-graphql/dist/renderGraphiQL.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.renderGraphiQL = renderGraphiQL;\n\n\n// Current latest version of GraphiQL.\nvar GRAPHIQL_VERSION = '0.9.3';\n\n// Ensures string values are safe to be used within a <script> tag.\n\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nfunction safeSerialize(data) {\n  return data ? JSON.stringify(data).replace(/\\//g, '\\\\/') : 'undefined';\n}\n\n/**\n * When express-graphql receives a request which does not Accept JSON, but does\n * Accept HTML, it may present GraphiQL, the in-browser GraphQL explorer IDE.\n *\n * When shown, it will be pre-populated with the result of having executed the\n * requested query.\n */\nfunction renderGraphiQL(data) {\n  var queryString = data.query;\n  var variablesString = data.variables ? JSON.stringify(data.variables, null, 2) : null;\n  var resultString = data.result ? JSON.stringify(data.result, null, 2) : null;\n  var operationName = data.operationName;\n\n  /* eslint-disable max-len */\n  return '<!--\\nThe request to this GraphQL server provided the header \"Accept: text/html\"\\nand as a result has been presented GraphiQL - an in-browser IDE for\\nexploring GraphQL.\\n\\nIf you wish to receive JSON, provide the header \"Accept: application/json\" or\\nadd \"&raw\" to the end of the URL within a browser.\\n-->\\n<!DOCTYPE html>\\n<html>\\n<head>\\n  <meta charset=\"utf-8\" />\\n  <title>GraphiQL</title>\\n  <meta name=\"robots\" content=\"noindex\" />\\n  <style>\\n    html, body {\\n      height: 100%;\\n      margin: 0;\\n      overflow: hidden;\\n      width: 100%;\\n    }\\n  </style>\\n  <link href=\"//cdn.jsdelivr.net/graphiql/' + GRAPHIQL_VERSION + '/graphiql.css\" rel=\"stylesheet\" />\\n  <script src=\"//cdn.jsdelivr.net/fetch/0.9.0/fetch.min.js\"></script>\\n  <script src=\"//cdn.jsdelivr.net/react/15.4.2/react.min.js\"></script>\\n  <script src=\"//cdn.jsdelivr.net/react/15.4.2/react-dom.min.js\"></script>\\n  <script src=\"//cdn.jsdelivr.net/graphiql/' + GRAPHIQL_VERSION + '/graphiql.min.js\"></script>\\n</head>\\n<body>\\n  <script>\\n    // Collect the URL parameters\\n    var parameters = {};\\n    window.location.search.substr(1).split(\\'&\\').forEach(function (entry) {\\n      var eq = entry.indexOf(\\'=\\');\\n      if (eq >= 0) {\\n        parameters[decodeURIComponent(entry.slice(0, eq))] =\\n          decodeURIComponent(entry.slice(eq + 1));\\n      }\\n    });\\n\\n    // Produce a Location query string from a parameter object.\\n    function locationQuery(params) {\\n      return \\'?\\' + Object.keys(params).map(function (key) {\\n        return encodeURIComponent(key) + \\'=\\' +\\n          encodeURIComponent(params[key]);\\n      }).join(\\'&\\');\\n    }\\n\\n    // Derive a fetch URL from the current URL, sans the GraphQL parameters.\\n    var graphqlParamNames = {\\n      query: true,\\n      variables: true,\\n      operationName: true\\n    };\\n\\n    var otherParams = {};\\n    for (var k in parameters) {\\n      if (parameters.hasOwnProperty(k) && graphqlParamNames[k] !== true) {\\n        otherParams[k] = parameters[k];\\n      }\\n    }\\n    var fetchURL = locationQuery(otherParams);\\n\\n    // Defines a GraphQL fetcher using the fetch API.\\n    function graphQLFetcher(graphQLParams) {\\n      return fetch(fetchURL, {\\n        method: \\'post\\',\\n        headers: {\\n          \\'Accept\\': \\'application/json\\',\\n          \\'Content-Type\\': \\'application/json\\'\\n        },\\n        body: JSON.stringify(graphQLParams),\\n        credentials: \\'include\\',\\n      }).then(function (response) {\\n        return response.text();\\n      }).then(function (responseBody) {\\n        try {\\n          return JSON.parse(responseBody);\\n        } catch (error) {\\n          return responseBody;\\n        }\\n      });\\n    }\\n\\n    // When the query and variables string is edited, update the URL bar so\\n    // that it can be easily shared.\\n    function onEditQuery(newQuery) {\\n      parameters.query = newQuery;\\n      updateURL();\\n    }\\n\\n    function onEditVariables(newVariables) {\\n      parameters.variables = newVariables;\\n      updateURL();\\n    }\\n\\n    function onEditOperationName(newOperationName) {\\n      parameters.operationName = newOperationName;\\n      updateURL();\\n    }\\n\\n    function updateURL() {\\n      history.replaceState(null, null, locationQuery(parameters));\\n    }\\n\\n    // Render <GraphiQL /> into the body.\\n    ReactDOM.render(\\n      React.createElement(GraphiQL, {\\n        fetcher: graphQLFetcher,\\n        onEditQuery: onEditQuery,\\n        onEditVariables: onEditVariables,\\n        onEditOperationName: onEditOperationName,\\n        query: ' + safeSerialize(queryString) + ',\\n        response: ' + safeSerialize(resultString) + ',\\n        variables: ' + safeSerialize(variablesString) + ',\\n        operationName: ' + safeSerialize(operationName) + ',\\n      }),\\n      document.body\\n    );\\n  </script>\\n</body>\\n</html>';\n}"}